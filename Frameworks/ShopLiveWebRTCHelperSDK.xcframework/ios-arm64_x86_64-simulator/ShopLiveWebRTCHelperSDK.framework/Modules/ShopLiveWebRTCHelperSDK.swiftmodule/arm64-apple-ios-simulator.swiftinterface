// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ShopLiveWebRTCHelperSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Foundation
import OSLog
import Swift
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers final public class SLRTCAudioDevice : ObjectiveC.NSObject {
  final public let audioSession: AVFAudio.AVAudioSession
  @objc final public var inputLatency: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var outputLatency: Foundation.TimeInterval {
    @objc get
  }
  @objc override dynamic public init()
  final public func updateAudioUnit()
  @objc deinit
}
extension ShopLiveWebRTCHelperSDK.SLRTCAudioDevice : WebRTC.RTCAudioDevice {
  @objc final public var deviceInputSampleRate: Swift.Double {
    @objc get
  }
  @objc final public var deviceOutputSampleRate: Swift.Double {
    @objc get
  }
  @objc final public var inputIOBufferDuration: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var outputIOBufferDuration: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var inputNumberOfChannels: Swift.Int {
    @objc get
  }
  @objc final public var outputNumberOfChannels: Swift.Int {
    @objc get
  }
  @objc final public var isInitialized: Swift.Bool {
    @objc get
  }
  @objc final public func initialize(with delegate: any WebRTC.RTCAudioDeviceDelegate) -> Swift.Bool
  @objc final public func terminateDevice() -> Swift.Bool
  @objc final public var isPlayoutInitialized: Swift.Bool {
    @objc get
  }
  @objc final public func initializePlayout() -> Swift.Bool
  @objc final public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc final public func startPlayout() -> Swift.Bool
  @objc final public func stopPlayout() -> Swift.Bool
  @objc final public var isRecordingInitialized: Swift.Bool {
    @objc get
  }
  @objc final public func initializeRecording() -> Swift.Bool
  @objc final public var isRecording: Swift.Bool {
    @objc get
  }
  @objc final public func startRecording() -> Swift.Bool
  @objc final public func stopRecording() -> Swift.Bool
}
extension ShopLiveWebRTCHelperSDK.SLRTCAudioDevice : ShopLiveWebRTCHelperSDK.SLRTCAudioSessionHandler {
  final public func handleInterruptionBegan(applicationWasSuspended: Swift.Bool)
  final public func handleInterruptionEnd(shouldResume: Swift.Bool)
  final public func handleAudioRouteChange()
  final public func handleMediaServerWereReset()
  final public func handleMediaServerWereLost()
}
public protocol SLRTCAudioSessionHandler : AnyObject {
  var audioSession: AVFAudio.AVAudioSession { get }
  func handleInterruptionBegan(applicationWasSuspended: Swift.Bool)
  func handleInterruptionEnd(shouldResume: Swift.Bool)
  func handleAudioRouteChange()
  func handleMediaServerWereReset()
  func handleMediaServerWereLost()
}
extension ShopLiveWebRTCHelperSDK.SLRTCAudioSessionHandler {
  public func subscribeAudioSessionNotifications() -> [Any]
  public func unsubscribeAudioSessionNotifications(observers: [Any])
  public func configureStereoRecording()
}
extension Dispatch.DispatchTimeInterval : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum IOSBundlePolicy : Swift.String {
  case balanced
  case maxCompat
  case maxBundle
  public func toBundlePolicy() -> WebRTC.RTCBundlePolicy
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IOSIceTransportsType : Swift.String {
  case none
  case relay
  case nohost
  case all
  public func toIceTransportsType() -> WebRTC.RTCIceTransportPolicy
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension WebRTC.RTCPeerConnectionState {
  public var name: Swift.String {
    get
  }
}
extension WebRTC.RTCIceConnectionState {
  public var name: Swift.String {
    get
  }
}
extension WebRTC.RTCSourceState {
  public var name: Swift.String {
    get
  }
}
extension WebRTC.RTCSignalingState {
  public var name: Swift.String {
    get
  }
}
extension WebRTC.RTCIceTransportPolicy {
  public var name: Swift.String {
    get
  }
}
extension WebRTC.RTCBundlePolicy {
  public var name: Swift.String {
    get
  }
}
public enum ShopLiveWebSocketEvent {
  case connected
  case text(Swift.String)
  case data(Foundation.Data)
  case emptyResponse
  case disConnected
  case closed((Foundation.Data?, Foundation.URLSessionWebSocketTask.CloseCode))
  case error((any Swift.Error)?)
  public var desc: Swift.String {
    get
  }
}
public protocol ShopLiveWebSocketDelegate : ObjectiveC.NSObjectProtocol {
  func didReceive(event: ShopLiveWebRTCHelperSDK.ShopLiveWebSocketEvent, client: Foundation.URLSessionWebSocketTask?, webSocket: ShopLiveWebRTCHelperSDK.ShopLiveWebSocket)
}
@objc @_inheritsConvenienceInitializers final public class ShopLiveWebSocket : ObjectiveC.NSObject {
  weak final public var delegate: (any ShopLiveWebRTCHelperSDK.ShopLiveWebSocketDelegate)?
  final public var tag: Swift.Int
  final public func openWebSocket(with url: Foundation.URL)
  final public func getSocketState() -> Foundation.URLSessionTask.State?
  final public func send(data: Foundation.Data, completion: @escaping (() -> ()))
  final public func closeWebSocket()
  final public func getCurrentWebSocketTask() -> Foundation.URLSessionWebSocketTask?
  @objc override dynamic public init()
  @objc deinit
}
extension ShopLiveWebRTCHelperSDK.ShopLiveWebSocket : Foundation.URLSessionWebSocketDelegate {
  @objc final public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc final public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
}
extension ShopLiveWebRTCHelperSDK.IOSBundlePolicy : Swift.Equatable {}
extension ShopLiveWebRTCHelperSDK.IOSBundlePolicy : Swift.Hashable {}
extension ShopLiveWebRTCHelperSDK.IOSBundlePolicy : Swift.RawRepresentable {}
extension ShopLiveWebRTCHelperSDK.IOSIceTransportsType : Swift.Equatable {}
extension ShopLiveWebRTCHelperSDK.IOSIceTransportsType : Swift.Hashable {}
extension ShopLiveWebRTCHelperSDK.IOSIceTransportsType : Swift.RawRepresentable {}
