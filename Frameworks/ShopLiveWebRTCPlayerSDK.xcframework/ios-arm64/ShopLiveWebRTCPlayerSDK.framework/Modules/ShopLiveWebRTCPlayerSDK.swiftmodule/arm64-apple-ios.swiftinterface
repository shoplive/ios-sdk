// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ShopLiveWebRTCPlayerSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVKit
import DeveloperToolsSupport
import Foundation
import MediaPlayer
import ShopLiveCorePlayerSDK
import ShopLiveWebRTCHelperSDK
import ShopliveSDKCommon
import Swift
import SwiftUI
import UIKit
import WebKit
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ShopLiveWebRTCPlayerSDKAsset : Swift.Sendable {
  public static let closebutton: ShopLiveWebRTCPlayerSDK.ShopLiveWebRTCPlayerSDKImages
}
public struct ShopLiveWebRTCPlayerSDKImages : Swift.Sendable {
  public let name: Swift.String
  public typealias Image = UIKit.UIImage
  public var image: ShopLiveWebRTCPlayerSDK.ShopLiveWebRTCPlayerSDKImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  public var swiftUIImage: SwiftUICore.Image {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
extension SwiftUICore.Image {
  public init(asset: ShopLiveWebRTCPlayerSDK.ShopLiveWebRTCPlayerSDKImages)
  public init(asset: ShopLiveWebRTCPlayerSDK.ShopLiveWebRTCPlayerSDKImages, label: SwiftUICore.Text)
  public init(decorative asset: ShopLiveWebRTCPlayerSDK.ShopLiveWebRTCPlayerSDKImages)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveWebRTCPlayerSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ShopLiveWebRTCPlayerSDKStrings : Swift.Sendable {
  public enum Chat : Swift.Sendable {
    public static let placeholder: Swift.String
    public enum Send : Swift.Sendable {
      public static let title: Swift.String
    }
  }
  public enum Share : Swift.Sendable {
    public enum Url : Swift.Sendable {
      public enum Empty : Swift.Sendable {
        public static let error: Swift.String
        public static let message: Swift.String
      }
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RTCInternalPlayerViewModel : ShopLiveCorePlayerSDK.ShopLiveBasePlayerViewModel {
  @objc deinit
  override public func onRetryOnNetworkDisConnect()
  override public func onSetSoundMuteStateOnWebViewSetConf()
  override public func onSetSoundMute(isMuted: Swift.Bool, needToSendToWeb: Swift.Bool)
  override public func onSetIsActivated(isActivated: Swift.Bool)
  override public func onSetPlayerConfiguration(configuration: ShopLiveCorePlayerSDK.ShopLivePlayerConfiguration)
  override public func onCheckAndActivateAudioSessionIfNeeded()
  override public func onTearDownViewModel()
  override public func onInitRtc(url: Foundation.URL?)
  override public func onResetPlayer()
  override public func onSetRtcDiscoveryUrl(url: Foundation.URL?)
  override public func onSetRtcSignallingUrl(url: Foundation.URL?)
  override public func onSetRtcResolution(resolution: Swift.String)
  override public func onRefreshRtcConnection()
  override public func onRequestShowOrHideLoadingView(needToShow: Swift.Bool)
  override public func onAudioSessionObserverSetIsMuted(isMuted: Swift.Bool)
  override public func onNetworkMonitorCurrentNetworkCapabilityChangedToDisconnected()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RTCPlayerViewModel : ShopLiveCorePlayerSDK.ShopLiveBasePlayerViewModel {
  override public func onRetryOnNetworkDisConnect()
  override public func onSetSoundMuteStateOnWebViewSetConf()
  override public func onSetSoundMute(isMuted: Swift.Bool, needToSendToWeb: Swift.Bool)
  override public func onCheckAndActivateAudioSessionIfNeeded()
  override public func onTearDownViewModel()
  override public func onInitRtc(url: Foundation.URL?)
  override public func onResetPlayer()
  override public func onSetRtcDiscoveryUrl(url: Foundation.URL?)
  override public func onSetRtcSignallingUrl(url: Foundation.URL?)
  override public func onSetRtcResolution(resolution: Swift.String)
  override public func onSetPlayerConfiguration(configuration: ShopLiveCorePlayerSDK.ShopLivePlayerConfiguration)
  override public func onRefreshRtcConnection()
  override public func onRequestShowOrHideLoadingView(needToShow: Swift.Bool)
  override public func onAudioSessionObserverSetIsMuted(isMuted: Swift.Bool)
  override public func onNetworkMonitorCurrentNetworkCapabilityChangedToDisconnected()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ShopLiveWebRTCPlayer : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public static func getRTCPlayerView() -> ShopLiveWebRTCPlayerSDK.ShopLiveRTCPlayerView
  @objc public static func getRTCPlayerViewModel(stateContainer: any ShopLiveCorePlayerSDK.ShopLivePlayerStateContainer) -> ObjectiveC.NSObject
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ShopLiveRTCPlayerView : UIKit.UIView, ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewInterface, ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewInterface {
  @_Concurrency.MainActor @preconcurrency public var rtcResultHanlder: ((ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewResult) -> ())?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func rtcAction(_ action: ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewAction)
  @_Concurrency.MainActor @preconcurrency public func getOsDisplayLayer() -> AVFoundation.AVSampleBufferDisplayLayer?
  @_Concurrency.MainActor @preconcurrency public func getInAppDisplayLayerVideoGravity() -> AVFoundation.AVLayerVideoGravity?
  @_Concurrency.MainActor @preconcurrency public var hlsResultHandler: ((ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewResult) -> ())?
  @_Concurrency.MainActor @preconcurrency public func hlsAction(_ action: ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewAction)
  @_Concurrency.MainActor @preconcurrency public func getAVPlayer() -> AVFoundation.AVPlayer?
  @_Concurrency.MainActor @preconcurrency public func getPlayerLayer() -> AVFoundation.AVPlayerLayer?
}
