// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveSDK
import AVFoundation
import AVKit
import CallKit
import CoreMedia
import ExternalAccessory
import Foundation
import MediaPlayer
@_exported import ShopLiveSDK
import Swift
import UIKit
import WebKit
import os.log
import os
extension UIViewController {
  @objc dynamic public func dismissKeyboard()
}
@objc public protocol ShopLiveSDKDelegate {
  @objc func handleNavigation(with url: Foundation.URL)
  @objc func handleDownloadCoupon(with couponId: Swift.String, completion: @escaping () -> Swift.Void)
  @objc func handleCustomAction(with id: Swift.String, type: Swift.String, payload: Any?, completion: @escaping () -> Swift.Void)
  @objc func handleChangeCampaignStatus(status: Swift.String)
  @objc func handleError(code: Swift.String, message: Swift.String)
  @objc func handleCampaignInfo(campaignInfo: [Swift.String : Any])
  @objc func handleCommand(_ command: Swift.String, with payload: Any?)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveViewContgroller : UIKit.UIViewController {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class ShopLive : ObjectiveC.NSObject {
  @objc deinit
}
extension ShopLive {
  @objc public enum PipPosition : Swift.Int {
    case topLeft
    case topRight
    case bottomLeft
    case bottomRight
    case `default`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum PresentationStyle : Swift.Int {
    case unknown
    case fullScreen
    case pip
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Phase : Swift.Int {
    case DEV
    case STAGE
    case REAL
    public var name: Swift.String {
      get
    }
    public init?(name: Swift.String)
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension ShopLive {
  @objc public static var viewController: ShopLiveSDK.ShopLiveViewContgroller? {
    @objc get
  }
  @objc public static func close()
  @objc public static func setChatViewFont(inputBoxFont: UIKit.UIFont, sendButtonFont: UIKit.UIFont)
  @objc public static func setShareScheme(_ scheme: Swift.String? = nil, custom: (() -> Swift.Void)?)
  @objc public static func onTerminated()
  @objc public static func setKeepPlayVideoOnHeadphoneUnplugged(_ keepPlay: Swift.Bool)
  @objc public static func isKeepPlayVideoOnHeadPhoneUnplugged() -> Swift.Bool
  @objc public static func setAutoResumeVideoOnCallEnded(_ autoResume: Swift.Bool)
  @objc public static func isAutoResumeVideoOnCallEnded() -> Swift.Bool
  @objc public static var user: ShopLiveSDK.ShopLiveUser? {
    @objc get
    @objc set
  }
  @objc public static var style: ShopLiveSDK.ShopLive.PresentationStyle {
    @objc get
  }
  @objc public static var pipPosition: ShopLiveSDK.ShopLive.PipPosition {
    @objc get
    @objc set
  }
  @objc public static var pipScale: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public static var webViewConfiguration: WebKit.WKWebViewConfiguration? {
    @objc get
    @objc set
  }
  @objc public static var delegate: ShopLiveSDK.ShopLiveSDKDelegate? {
    @objc get
    @objc set
  }
  @objc public static var authToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc public static func configure(with accessKey: Swift.String)
  @objc public static func configure(with accessKey: Swift.String, phase: ShopLiveSDK.ShopLive.Phase)
  @objc public static func play(with campaignKey: Swift.String?, _ parent: UIKit.UIViewController? = nil)
  @objc public static func startPictureInPicture(with position: ShopLiveSDK.ShopLive.PipPosition, scale: CoreGraphics.CGFloat)
  @objc public static func startPictureInPicture()
  @objc public static func stopPictureInPicture()
  @objc public static func reloadLive()
}
@objc public class ShopLiveUser : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(id: Swift.String = "", name: Swift.String = "", gender: ShopLiveSDK.ShopLiveUser.Gender = .unknown, age: Swift.Int = -1)
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension ShopLiveUser {
  @objc public enum Gender : Swift.Int, Swift.Codable, Swift.CaseIterable {
    case female = 1
    case male = 2
    case neutral = 3
    case unknown = 0
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [ShopLiveSDK.ShopLiveUser.Gender]
    public typealias RawValue = Swift.Int
    public static var allCases: [ShopLiveSDK.ShopLiveUser.Gender] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension ShopLiveSDK.ShopLive.PipPosition : Swift.Equatable {}
extension ShopLiveSDK.ShopLive.PipPosition : Swift.Hashable {}
extension ShopLiveSDK.ShopLive.PipPosition : Swift.RawRepresentable {}
extension ShopLiveSDK.ShopLive.PresentationStyle : Swift.Equatable {}
extension ShopLiveSDK.ShopLive.PresentationStyle : Swift.Hashable {}
extension ShopLiveSDK.ShopLive.PresentationStyle : Swift.RawRepresentable {}
extension ShopLiveSDK.ShopLive.Phase : Swift.Equatable {}
extension ShopLiveSDK.ShopLive.Phase : Swift.Hashable {}
extension ShopLiveSDK.ShopLive.Phase : Swift.RawRepresentable {}
extension ShopLiveSDK.ShopLiveUser.Gender : Swift.Equatable {}
extension ShopLiveSDK.ShopLiveUser.Gender : Swift.Hashable {}
extension ShopLiveSDK.ShopLiveUser.Gender : Swift.RawRepresentable {}
